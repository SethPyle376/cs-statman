// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package csproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// StatmanClient is the client API for Statman service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StatmanClient interface {
	SaveMatch(ctx context.Context, in *SaveMatchRequest, opts ...grpc.CallOption) (*SaveMatchResponse, error)
}

type statmanClient struct {
	cc grpc.ClientConnInterface
}

func NewStatmanClient(cc grpc.ClientConnInterface) StatmanClient {
	return &statmanClient{cc}
}

func (c *statmanClient) SaveMatch(ctx context.Context, in *SaveMatchRequest, opts ...grpc.CallOption) (*SaveMatchResponse, error) {
	out := new(SaveMatchResponse)
	err := c.cc.Invoke(ctx, "/statman.Statman/SaveMatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StatmanServer is the server API for Statman service.
// All implementations must embed UnimplementedStatmanServer
// for forward compatibility
type StatmanServer interface {
	SaveMatch(context.Context, *SaveMatchRequest) (*SaveMatchResponse, error)
	mustEmbedUnimplementedStatmanServer()
}

// UnimplementedStatmanServer must be embedded to have forward compatible implementations.
type UnimplementedStatmanServer struct {
}

func (UnimplementedStatmanServer) SaveMatch(context.Context, *SaveMatchRequest) (*SaveMatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveMatch not implemented")
}
func (UnimplementedStatmanServer) mustEmbedUnimplementedStatmanServer() {}

// UnsafeStatmanServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StatmanServer will
// result in compilation errors.
type UnsafeStatmanServer interface {
	mustEmbedUnimplementedStatmanServer()
}

func RegisterStatmanServer(s grpc.ServiceRegistrar, srv StatmanServer) {
	s.RegisterService(&_Statman_serviceDesc, srv)
}

func _Statman_SaveMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveMatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatmanServer).SaveMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/statman.Statman/SaveMatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatmanServer).SaveMatch(ctx, req.(*SaveMatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Statman_serviceDesc = grpc.ServiceDesc{
	ServiceName: "statman.Statman",
	HandlerType: (*StatmanServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveMatch",
			Handler:    _Statman_SaveMatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "matchinfo.proto",
}
